O looping ao clicar no botão "Salvar" provavelmente está acontecendo por um desses motivos:

⚠️ 1. O useMutation está sendo reexecutado em loop por dependência ou onSuccess mal definido
Embora o código postado não esteja completo (parece ter sido cortado na parte do upload de fotos), com base no que foi carregado, alguns pontos que podem causar esse comportamento:

✅ Verifique se existe algo como:
tsx
Copiar
Editar
useEffect(() => {
  createServiceMutation.mutate(...);
}, []);
Ou:

tsx
Copiar
Editar
if (formState.isValid) {
  createServiceMutation.mutate(...);
}
Esses padrões podem acionar a mutação repetidamente.

⚠️ 2. O formulário está sendo submetido automaticamente ao renderizar
Se houver algo assim:

tsx
Copiar
Editar
<form onSubmit={form.handleSubmit(onSubmit)}>
E onSubmit estiver disparando createServiceMutation.mutate, verifique se não há algum botão invisível que cause o submit automaticamente. Além disso, verifique se o button de salvar está com type="submit" e não um onClick que chama form.handleSubmit() repetidamente.

⚠️ 3. Re-renderização causada por alteração de estado dentro da mutação
Se o createServiceMutation chama setState diretamente (ex: setPhotos(null) ou setLocation(...)) e por acaso essa alteração de estado re-renderiza o componente inteiro, e algo nessa renderização reaciona com a mutação, você pode entrar num ciclo.

✅ Sugestões de correção/diagnóstico
Certifique-se de que o botão Salvar esteja assim:

tsx
Copiar
Editar
<Button type="submit" disabled={form.formState.isSubmitting}>
  Salvar
</Button>
E que o Form use corretamente:

tsx
Copiar
Editar
<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)}>
    ...
  </form>
</Form>
No onSubmit, coloque logs:

tsx
Copiar
Editar
const onSubmit = async (data: FormData) => {
  console.log("Submetendo formulário com os dados:", data);
  createServiceMutation.mutate(data);
};
Evite createServiceMutation.mutate() ser chamado dentro de useEffect, a menos que haja um controle claro de quando ele deve rodar.