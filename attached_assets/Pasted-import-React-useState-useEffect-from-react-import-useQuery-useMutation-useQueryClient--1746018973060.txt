import React, { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { getApi, postApi } from "@/lib/apiWrapper";
import { checkNetworkStatus } from "@/lib/pwaManager";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/AuthContext";
import { PageHeader } from "@/components/common/PageHeader";
import { Button } from "@/components/ui/button";
import { 
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { 
  Card, 
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { cn } from "@/lib/utils";
import { CalendarIcon } from "lucide-react";
import { LocationSelector } from "@/components/common/LocationSelector";
import { PhotoUpload } from "@/components/common/PhotoUpload";
import { Client, ServiceType, User, Vehicle } from "@/types";
import { insertServiceSchema } from "@shared/schema.mysql";

const formSchema = insertServiceSchema.extend({
  client_id: z.number({
    required_error: "O cliente é obrigatório"
  }),
  vehicle_id: z.number({
    required_error: "O veículo é obrigatório"
  }),
  service_type_id: z.number({
    required_error: "O tipo de serviço é obrigatório"
  }),
  location_type: z.enum(["client_location", "workshop"], {
    required_error: "A localização é obrigatória"
  }),
  scheduled_date: z.union([z.date(), z.string()], {
    required_error: "A data é obrigatória"
  }),
  scheduled_time: z.string().optional(),
  status: z.string().default("pending"),
  price: z.number().optional().nullable(),
  administrative_fee: z.number().optional().nullable().default(0),
  photos: z.any().optional(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  description: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
});

type FormData = z.infer<typeof formSchema>;

export default function NewService() {
  const [_, setLocation] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const [selectedClientId, setSelectedClientId] = useState<number | null>(null);
  const [photos, setPhotos] = useState<FileList | null>(null);

  const { data: clients } = useQuery<Client[]>({
    queryKey: ['/api/clients'],
    queryFn: () => getApi<Client[]>('/api/clients?filterMode=active', {
      enableOffline: true,
      offlineTableName: 'clients'
    })
  });

  const { data: vehicles } = useQuery<Vehicle[]>({
    queryKey: [selectedClientId ? `/api/clients/${selectedClientId}/vehicles` : null],
    enabled: !!selectedClientId,
    queryFn: async ({ queryKey }) => {
      const url = queryKey[0];
      if (!url) return [];
      return getApi<Vehicle[]>(url as string, {
        enableOffline: true,
        offlineTableName: 'vehicles'
      });
    }
  });

  const { data: serviceTypes } = useQuery<ServiceType[]>({
    queryKey: ['/api/service-types'],
    queryFn: () => getApi<ServiceType[]>('/api/service-types', {
      enableOffline: true,
      offlineTableName: 'serviceTypes'
    })
  });

  const { data: technicians } = useQuery<User[]>({
    queryKey: ['/api/users?role=technician'],
    queryFn: () => getApi<User[]>('/api/users?role=technician', {
      enableOffline: true,
      offlineTableName: 'users'
    })
  });

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      client_id: undefined,
      vehicle_id: undefined,
      service_type_id: undefined,
      technician_id: undefined,
      status: "pending",
      description: "",
      location_type: "client_location",
      price: 0,
      administrative_fee: 0,
      address: "",
      latitude: null,
      longitude: null,
      notes: "",
    },
  });

  useEffect(() => {
    if (user?.role === 'technician') {
      form.setValue('technician_id', user.id);
    }
  }, [user, form]);

  const createServiceMutation = useMutation({
    mutationFn: async (data: FormData) => {
      const networkOnline = checkNetworkStatus();
      let formattedData = { ...data };

      try {
        let dateToUse = typeof data.scheduled_date === 'string'
          ? new Date(data.scheduled_date)
          : data.scheduled_date instanceof Date
            ? data.scheduled_date
            : new Date();

        dateToUse.setHours(12, 0, 0, 0);

        if (data.scheduled_time) {
          const [hours, minutes] = data.scheduled_time.split(':');
          dateToUse.setHours(Number(hours), Number(minutes), 0, 0);
        }

        formattedData.scheduled_date = dateToUse.toISOString();
      } catch {
        formattedData.scheduled_date = new Date().toISOString();
      }

      formattedData.total = (formattedData.price || 0) + (formattedData.administrative_fee || 0);

      const { scheduled_time, photos: _, ...serviceData } = formattedData;

      const createdService = await postApi<any>('/api/services', serviceData, {
        enableOffline: true,
        offlineTableName: 'services'
      });

      if (!networkOnline || createdService._isOffline || createdService._offline) {
        return {
          ...createdService,
          _offline: true,
          _isOffline: true,
          id: createdService.id || Math.floor(Math.random() * -1000000)
        };
      }

      return createdService;
    }
  });

  // ... restante do componente (formulário, renderização, etc)
} 
