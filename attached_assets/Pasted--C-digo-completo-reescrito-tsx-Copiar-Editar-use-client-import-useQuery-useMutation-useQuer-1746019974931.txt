✅ Código completo reescrito
tsx
Copiar
Editar
"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { useRouter } from "next/navigation";
import { useState } from "react";
import toast from "react-hot-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

interface EditarOSProps {
  id: string;
}

export default function EditarOS({ id }: EditarOSProps) {
  const queryClient = useQueryClient();
  const router = useRouter();

  // Estados locais do formulário
  const [formData, setFormData] = useState({
    date: "",
    vehicle: "",
    type: "",
    value: "",
    notes: "",
  });

  // GET da OS atual
  const { data, isLoading, error } = useQuery({
    queryKey: ["os", id],
    queryFn: async () => {
      const res = await axios.get(`/api/os/${id}`);
      return res.data;
    },
    enabled: !!id,
    onSuccess: (data) => {
      setFormData({
        date: data.scheduled_date ? new Date(data.scheduled_date).toISOString().split("T")[0] : "",
        vehicle: data.vehicle ?? "",
        type: data.service_type ?? "",
        value: data.value ?? "",
        notes: data.notes ?? "",
      });
    },
  });

  // PUT para atualizar a OS
  const mutation = useMutation({
    mutationFn: async (newData: typeof formData) => {
      await axios.put(`/api/os/${id}`, newData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["os"] });
      toast.success("Ordem de serviço atualizada!");
      router.push("/os");
    },
    onError: () => {
      toast.error("Erro ao atualizar a OS.");
    },
  });

  // Handler de envio
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    mutation.mutate(formData);
  };

  // Handler de mudanças nos inputs
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  if (isLoading) return <p>Carregando dados...</p>;
  if (error) return <p>Erro ao carregar OS.</p>;

  return (
    <form onSubmit={handleSubmit} className="max-w-xl mx-auto space-y-4 p-4">
      <div>
        <Label htmlFor="date">Data</Label>
        <Input type="date" name="date" id="date" value={formData.date} onChange={handleChange} required />
      </div>
      <div>
        <Label htmlFor="vehicle">Veículo</Label>
        <Input type="text" name="vehicle" id="vehicle" value={formData.vehicle} onChange={handleChange} required />
      </div>
      <div>
        <Label htmlFor="type">Tipo de Serviço</Label>
        <Input type="text" name="type" id="type" value={formData.type} onChange={handleChange} required />
      </div>
      <div>
        <Label htmlFor="value">Valor (€)</Label>
        <Input type="number" step="0.01" name="value" id="value" value={formData.value} onChange={handleChange} required />
      </div>
      <div>
        <Label htmlFor="notes">Observações</Label>
        <Textarea name="notes" id="notes" value={formData.notes} onChange={handleChange} />
      </div>
      <Button type="submit" disabled={mutation.isLoading}>
        {mutation.isLoading ? "Salvando..." : "Salvar Alterações"}
      </Button>
    </form>
  );
}
✅ O que você pode ajustar conforme sua estrutura:
Altere o endpoint /api/os/${id} se seu backend usa outro formato;

Ajuste o nome dos campos (vehicle, service_type, etc.) para refletir sua estrutura real de dados;

A navegação após o update está com router.push("/os"), mude se necessário.